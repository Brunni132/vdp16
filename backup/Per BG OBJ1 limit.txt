vdp.ts:
	private _computeOBJ0Limit(): number {
		// Count the number of BGs covering the full screen
		// const pixels = this._bgBuffer.getTotalPixels() + this._tbgBuffer.getTotalPixels();
		// const layers = Math.ceil(pixels / (SCREEN_WIDTH * SCREEN_HEIGHT));
		// let limit = OBJ0_CELL_LIMIT;
		// if (layers >= 3) limit -= 128;
		// if (layers >= 4) limit -= 128;
		// return limit;
		return OBJ0_CELL_LIMIT;
	}

maps.js:
	/**
	 * @returns {{w: number, h: number}} the size of the BG at the index-th position.
	 * @param index {number} 0-based BG index (0 = the first from firstVertice)
	 */
	getSizeOfBG(index) {
		// (left,top) in row 0.xy, (right,bottom) in row 2.xy
		const vert = 4 * (this.firstVertice + BG_BUFFER_STRIDE * index);
		return {
			w: Math.abs(this.xyzp[vert + 4 * 2] - this.xyzp[vert]),
			h: Math.abs(this.xyzp[vert + 4 * 2 + 1] - this.xyzp[vert + 1])
		};
	}

	/**
	 * @returns {number} the total number of pixels that the buffered maps use
	 */
	getTotalPixels() {
		let total = 0;
		for (let i = 0; i < this.usedLayers; i++) {
			const size = this.getSizeOfBG(i);
			total += size.w * size.h;
		}
		return total;
	}

