utils.js:
/**
 * @param mat {mat3type}
 * @returns {vec3}
 */
export function getScalingFactorOfMatrix(mat) {
	const scaling = vec3.create();
	const fullMat = mat4.fromValues(
		mat[0], mat[1], mat[2], 0,
		mat[3], mat[4], mat[5], 0,
		mat[6], mat[7], mat[8], 0,
		0, 0, 0, 1);
	mat4.getScaling(scaling, fullMat);
	return scaling;
}

sprites.js:
	/**
	 *
	 * @param scaling {vec3}
	 * @param first {number}
	 * @param count {number}
	 * @returns	{number} number of cells used
	 */
	computeUsedObjects(scaling, first = -1, count = -1) {
		let result = 0;
		if (first < 0) first = this.firstSprite;
		if (count < 0) count = this.usedSprites;

		for (let i = first; i < first + count; i++) {
			result += this._computeObjectCells(this.getSizeOfObject(i), scaling);
		}
		return result;
	}
	/**
	 * Computes the number of pixels that an object uses with the transform. Note that even offscreen pixels count toward
	 * the limit!
	 * @param size {{w: number, h: number}}
	 * @param scaling {vec3}
	 * @returns {number} number of cells (32x32)
	 * @private
	 */
	_computeObjectCells(size, scaling) {
		return Math.max(1, Math.ceil(size.w * scaling[0] / OBJ_CELL_SIZE) * Math.ceil(size.h * scaling[1] / OBJ_CELL_SIZE));
	}

	/**
	 * Modifies the OBJ list to fit within the number of cells. Use the return value to know how many sprites to draw.
	 * @param scaling {vec3}
	 * @param maxCells {number} maximum allowed number of cells
	 * @returns {number} sprites fully drawable for this list
	 * @protected
	 */
	_limitObjList(scaling, maxCells) {
		let cells = 0;
		const endOfList = this.firstSprite + this.usedSprites;
		for (let i = this.firstSprite; i < endOfList; i++) {
			const size = this.getSizeOfObject(i);
			const current = this._computeObjectCells(size, scaling);

			if (cells + current > maxCells) {

				// TODO Florian -- Limit the width of this sprite -- Doesn't work because we need to scale the UV too with floating point UV rendering
				//const cellsTall = Math.ceil(size.h * layerTransform.scaling[1] / OBJ_CELL_SIZE);
				//const allowedCellsWide = (maxCells - cells) / cellsTall;
				//this.setWidthOfObject(i, allowedCellsWide * OBJ_CELL_SIZE);
				//return i - this.firstSprite + 1;

				console.log('Too many OBJ cells on ${this.name} (discarded ${endOfList - i}/${this.usedSprites} entries)');
				return i - this.firstSprite;
			}
			cells += current;
		}
		return this.usedSprites;
	}

VDP.ts:
	/**
	 * @param [opts]
	 * @param [opts.obj0Transform] affine transformation matrix for standard objects
	 * @param [opts.obj1Transform] affine transformation matrix for transparent objects
	 */
	configOBJTransform(opts: {obj0Transform: mat3type, obj1Transform: mat3type}) {
		if (opts.obj0Transform) this.obj0LayerTransform.setMatrix(opts.obj0Transform);
		if (opts.obj1Transform) this.obj1LayerTransform.setMatrix(opts.obj1Transform);
	}

    // Transformation matrix for OBJ0 (opaque)
    private obj0LayerTransform = new LayerTransform();
    // Transformation matrix for OBJ1 (transparent)
    private obj1LayerTransform = new LayerTransform();

	_computeObjectCells(size, scaling) {
		return Math.max(1, Math.ceil(size.w * scaling[0] / OBJ_CELL_SIZE) * Math.ceil(size.h * scaling[1] / OBJ_CELL_SIZE));
	}

	private _drawObjLayer(objBuffer: ObjBuffer, transparencyConfig: TransparencyConfig, layerTransform: LayerTransform, objLimit = 0) {
		// Use config only for that poly list
		layerTransform.getInvertedMatrixIn(this.modelViewMatrix);
		transparencyConfig.apply(this);
		drawPendingObj(this, objBuffer, objLimit);
		mat3.identity(this.modelViewMatrix);
	}

	private _totalUsedOBJ0(): number {
		const tempMat = mat3.create();
		this.obj0LayerTransform.getInvertedMatrixIn(tempMat);
		return this.obj0Buffer.computeUsedObjects(getScalingFactorOfMatrix(tempMat));
	}


